<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<context:annotation-config></context:annotation-config>

	<context:component-scan base-package="com.kh.aop"></context:component-scan>
	
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!-- AspectJ 어노테이션을 사용한 애스펙트 적용을 위한 프록시 설정 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!--
		Aspect로 지정할 객체는 반드시 빈으로 선언되어야 한다.
		(xml, annotation으로 설정 시에도 모두 빈으로 선언되어야 한다.)
	-->
	<bean id="characterAspect" class="com.kh.aop.aspect.CharacterAspect"/>
	<bean id="character" class="com.kh.aop.character.Character"/>

	<!-- 2. Pointcut은 앞에 설명 후 뒤에 작업하자.
		포인트 커트 표현식 
		스프링 AOP에서 포인트 커트는  AspectJ의 포인 트커트 표현식 언어를 이용해 정의한다.
		스프링은 AspectJ에서 사용할 수 있는 포인트 커드 지정자에 속하는 것만 지원한다는 사실이다.
			스프링 AOP는 프록시 기반이고 일부 포인트 커트 표현식은 프록시 기반 AOP와 관련 없다.
		스프링 AOP에서 지원되는 AspectJ 포인트 커트 지정자 (이외의 다른 지정자를 사용하면 Illegal(일리걸, 불법)ArgumentException이 발생한다.)
			args()
				인자가 주어진 타입의 인스턴스인 조인 포인트 매칭을 정의한다.
			@args()
				전달된 인자의 런타임 타입이 주어진 타입의 애너테이션을 갖는 조인 포인트 매칭을 정의한다.
			execution()
				메소드 실행 조인 포인트와 일치시키는데 사용한다.
				모든 포인트 커드 정의에 사용할 기본 지정자이고 포인트 커트의 범위를 제한하려면 다른 지정자를 사용해야 한다.
			within()(위씬, ~ 이내의)
				특정 타입에 속하는 조인 조인트를 정의한다.
			@annotation
				조인 조인트의 대상 객체가 주어진 애너테이션을 갖는 조인 포인트를 정의한다.
			스프링 버전 2.5 버전부터 새로운 bean() 지정자를 도입했는데 이를 이용하여 포인트 커트 표현식 내에서 ID로 빈을 지정할 수 있다.
			
		execution([수식어] 리턴타입 [클래스이름].이름(파라미터)
		수식어 : public, private 등 수식어를 명시합니다. (생략 가능)
		리턴 타입 : 리턴 타입을 명시합니다.
		클래스 이름 및 이름 : 클래스 이름과 메서드 이름을 명시합니다. (클래스 이름은 풀 패키지명으로 명시해야합니다. 생략도 가능)
		파라미터 : 메서드의 파라미터를 명시합니다.
		" * " : 모든 값을 표현합니다.
		" .. " : 0개 이상을 의미합니다.
		execution(public Integer com.edu.aop.*.*(*))
		  - com.edu.aop 패키지에 속해있고, 파라미터가 1개인 모든 메서드
		execution(* com.edu..*.get*(..))
		  - com.edu 패키지 및 하위 패키지에 속해있고, 이름이 get으로 시작하는 파라미터가 0개 이상인 모든 메서드 
		execution(* com.edu.aop..*Service.*(..))
		  - com.edu.aop 패키지 및 하위 패키지에 속해있고, 이름이 Service로 끝나는 인터페이스의 파라미터가 0개 이상인 모든 메서드
		execution(* com.edu.aop.BoardService.*(..))
		  - com.edu.aop.BoardService 인터페이스에 속한 파라미터가 0개 이상인 모든 메서드
		execution(* some*(*, *))
		  -메서드 이름이 some으로 시작하고 파라미터가 2개인 모든 메서드
		within(com.edu.aop.SomeService) 
		  - com.edu.aop.SomeService 인터페이스의 모든 메서드
		within(com.edu.aop.*)
		  - com.edu.aop 패키지의 모든 메서드
		within(com.edu.aop..*)
	 	  - com.edu.aop 패키지 및 하위 패키지의 모든 메서드
	 	bean(someBean)
	 	  - 이름이 someBean인 빈의 모든 메서드
		bean(some*)
		  - 빈의 이름이 some으로 시작하는 빈의 모든 메서드
	-->
	
	<!-- 
	<aop:config>
		<aop:aspect ref="characterAspect">
			<aop:pointcut 
				id="questPointcut"
				expression="execution(* com.kh.aop.character.Character.quest(..)) and args(questName)" />
				
			<aop:before
				pointcut-ref="questPointcut"
				method="beforeQuest"/>
				
			<aop:after
				pointcut="execution(* com.kh.aop.character.Character.quest(..))" 
				method="afterQuest"/>
			
			<aop:after-returning 
				pointcut-ref="questPointcut"
				returning="result"
				method="questSuccess"/>
				
			<aop:after-throwing
				pointcut-ref="questPointcut"
				throwing="exception"
				method="questFail"/>
			
			<aop:around
				pointcut="execution(* com.kh.aop.character.Character.quest(..))" 
				method="aroundQuest"/>
		</aop:aspect>
	</aop:config>
	-->
</beans>
