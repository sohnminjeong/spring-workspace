<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">
	<!-- namespace : 해당 mapper 파일의 고유한 별칭 -->
	
	<!-- resultMap : 조회한 결과를 객체와 Row 간의 1:1 매칭이 아닌,
					원하는 객체의 필드에 담아 반환하고자 할 때 사용 
		id는 primary key / result는 일반 컬럼
		property는 자바 필드 변수 이름 / column이 DB 해당 컬럼			
	-->
	<resultMap type="Member" id="memberMap">
		<id property="id" column="member_id"/>
		<result property="password" column="member_pwd"/>
		<result property="name" column="member_name"/>
	</resultMap>
	<!-- 
		<insert|update|delete|select 
			id="식별자" 
			[parameterType="전달받을자바타입|별칭"]
			[resultType="조회결과를 반환하고자 하는 자바 타입|별칭" 
				| resultMap="조회결과를 뽑아서 매핑할 resultMap의 id"]
			>
		</insert|update|delete|select>
	 -->
	
	<!-- <select id="showAllMember" resultType="Member"> => resultMap사용하게 되면 resultType은 resultMap으로 변경-->
	<select id="showAllMember" resultMap="memberMap">
		SELECT * FROM member
	</select>
	
	<!-- parameter값 예시 : #{id} -->
	<!-- registerMember : insert, parameterType : Member -->
	<insert id="registerMember" parameterType="Member">
		INSERT INTO member VALUES(#{id}, #{password}, #{name})
	</insert>
	
	<!-- login : select, parameterType : Member, resultType : Member -->
	<!-- <select id="login" parameterType="Member" resultType="Member"> -->
	<select id="login" parameterType="Member" resultMap="memberMap">
		SELECT * FROM member WHERE member_id=#{id} AND member_pwd=#{password}
	</select>
	
	<!-- updateMember : update, parameterType : Member -->
	<update id="updateMember" parameterType="Member">
		UPDATE member 
		<!-- <trim prefix="SET" suffixOverrides=","> -->
		<set>
			<if test="password != null">
				member_pwd=#{password},
			</if>
			<if test="name != null">
				member_name=#{name}
			</if>
		</set>
		<!-- </trim> -->
		WHERE member_id=#{id}
	</update>
	
	<!-- 
		* if
		- 동적 쿼리를 구현할 때 기본적으로 사용되는 구문 
		- 특정 조건을 만족할 경우 안의 구문을 쿼리에 포함 
		
		* choose
		- JSTL의 choose 구문과 유사하여 주어진 구문 중 한가지만을 수행 
		- 하위 요소인 when, otherwise 요소와 함께 사용
		
		* trim : 쿼리 구문의 특정 부분을 없앨 때 사용 
			- where 또는 set(update문)과 유사 
			- prefix로 처음 시작할 단어와 prefixOverrides로 시작 시 제거해야 할 단어 명시
				prefixOverrides : WHERE(prefix값) 뒤에 다른 조건이 붙을 경우 명시
			- suffixOverrides로 끝날 시 제거해야 할 단어 명시 
			
		* where 
			- 기존 쿼리의 where 절을 동적으로 구현할 때 사용
			- 만약 태그 안의 내용이 'AND'나 'OR'로 시작할 경우 'AND'나 'OR'을 제거
		
		* set
			- 기존의 UPDATE SET 절을 동적으로 구현할 때 사용
			- SET 키워드를 붙이고 불필요한 콤마(,)를 제거  
	 -->

	<!-- findMember : select, parameterType : String, resultType : Member -->
	<!-- 	<select id="findMember" parameterType="SearchDTO" resultType="Member"> -->
	<select id="findMember" parameterType="SearchDTO" resultMap="memberMap">
		SELECT * FROM member 
		<!--<trim prefix="WHERE" prefixOverrides="AND/OR">-->
		 <where>
			<!-- if 구문 
			<if test="select == 'all'">
				id LIKE CONCAT('%',#{keyword},'%') 
				OR name LIKE CONCAT('%',#{keyword},'%')
			</if>
			<if test="select == 'id'">
				id LIKE CONCAT('%',#{keyword},'%') 
			</if>
			<if test="select == 'name'">
				name LIKE CONCAT('%',#{keyword},'%')
			</if> 
			-->
			<choose>
				<when test="select == 'all'">
					member_id LIKE CONCAT('%',#{keyword},'%') 
				OR member_name LIKE CONCAT('%',#{keyword},'%')
				</when>
				<when test="select == 'id'">
					member_id LIKE CONCAT('%',#{keyword},'%')
				</when>
				<when test="select == 'name'">
					member_name LIKE CONCAT('%',#{keyword},'%')
				</when>
			</choose>
		<!-- </trim> -->
		</where> 
	</select>
	
	<!-- foreach 구문 : 동적 쿼리를 구현할 때 컬렉션에 대한 반복 처리 제공 -->
	<!-- <select id="findMember2" parameterType="ArrayList" resultType="Member"> -->
	<select id="findMember2" parameterType="ArrayList" resultMap="memberMap">
		SELECT * FROM member 
		WHERE member_id IN
		<foreach collection="list" item="item" open="(" close=")" separator=",">
			#{item}		
		</foreach>
	</select>
</mapper>